service: product-service1
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: '3'

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1

  environment:
    productsTableName: ${env:PRODUCTS_TABLE_NAME}
    stocksTableName: ${env:STOCKS_TABLE_NAME}
    topicArn:
      Ref: createProductTopic

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ productsTable, Arn ]
        - "Fn::GetAtt": [ stocksTable, Arn ]
    - Effect: Allow
      Action: "sqs:*"
      Resource:
        - "Fn::GetAtt": [ catalogItemsQueue, Arn ]
    - Effect: Allow
      Action: "sns:*"
      Resource:
        Ref: createProductTopic

functions:
  products:
    handler: functions/get-products-list/get-products-list.getProductsList
    events:
      - http:
          method: get
          path: /products
          cors: true
  product:
    handler: functions/get-product-by-id/get-product-by-id.getProductById
    events:
      - http:
          method: get
          path: /products/{productId}
          cors: true
          request:
            parameters:
              paths:
                productId: true
  createProduct:
    handler: functions/create-product/create-product.createProduct
    events:
      - http:
          method: post
          path: /products
          cors: true
  catalogBatchProcess:
    handler: functions/catalog-batch-process/catalog-batch-process.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
            - catalogItemsQueue
            - Arn

resources:
  Resources:
    productsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:PRODUCTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    stocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:STOCKS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:QUEUE_NAME}
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${env:SNS_TOPIC_NAME}
    createProductTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:EMAIL}
        Protocol: email
        TopicArn:
          Ref: createProductTopic
    filteredSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:EMAIL_FOR_FILTERED}
        Protocol: email
        TopicArn:
          Ref: createProductTopic
        FilterPolicyScope: MessageBody
        FilterPolicy: '{"count": [{"numeric": [">", 500]}]}'


